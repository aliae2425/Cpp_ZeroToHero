/*
üéØ EXERCICE 25 : ENUMERATIONS - GESTION DE JOURS DE RESTAURANT
==============================================================

üìö TH√âORIE APPROFONDIE :

Les **√©num√©rations (enum)** sont des types de donn√©es qui permettent de d√©finir 
un ensemble fini de valeurs nomm√©es. Imagine un restaurant qui a des menus diff√©rents 
selon les jours - plut√¥t que d'utiliser des nombres (0=lundi, 1=mardi...), 
les √©num√©rations donnent des noms significatifs ! üß†

En C++, au lieu d'√©crire `int jour = 1;` (qu'est-ce que 1 ?), 
tu √©cris `Jour aujourdhui = MARDI;` (c'est clair ! üèóÔ∏è)

üìã SYNTAXE FONDAMENTALE :
```cpp
enum NomEnum {
    VALEUR1,     // = 0 par d√©faut
    VALEUR2,     // = 1 par d√©faut  
    VALEUR3 = 5, // valeur explicite
    VALEUR4      // = 6 (suit la s√©quence)
};
```

‚ö° DIFF√âRENCES AVEC LES CONCEPTS PR√âC√âDENTS :
- **Variables** : stockent des valeurs quelconques
- **Constantes** : valeur fixe unique
- **Enums** : ensemble limit√© de valeurs nomm√©es et logiquement li√©es

üéØ AVANTAGES ENUMERATIONS :
- Code plus lisible : `ROUGE` vs `0`
- Pr√©vention d'erreurs : impossible d'assigner une valeur invalide
- Auto-compl√©tion IDE : voir toutes les valeurs possibles
- Maintenance facile : changer l'ordre n'affecte pas la logique

üí° MISSION PRATIQUE : 
Cr√©e un syst√®me de gestion pour un restaurant qui adapte son menu selon le jour !
1. Cr√©er une √©num√©ration `JourSemaine` avec les 7 jours
2. Cr√©er une √©num√©ration `TypeMenu` (VIANDE, POISSON, VEGETARIEN, PIZZA)
3. Fonction `obtenirMenu(JourSemaine jour)` qui retourne le TypeMenu du jour
4. Fonction `afficherMenu(TypeMenu menu)` qui affiche le nom et prix du menu
5. Programme principal qui teste tous les jours de la semaine

üî• BONUS : Ajouter une fonction `joursAvecMenu(TypeMenu menu)` qui liste 
tous les jours o√π ce menu est servi !
*/

#include <iostream>
using namespace std;

// üéØ TON CODE ICI - D√©finis tes √©num√©rations et fonctions

enum JourSemaine {
    LUNDI, MARDI, MERCREDI, JEUDI, VENDREDI, SAMEDI, DIMANCHE
};

enum TypeMenu {
    VIANDE, POISSON, VEGETARIEN, PIZZA
};

TypeMenu obtenirMenu(JourSemaine jour) {
    switch (jour) {
        case LUNDI:
        case MARDI:
            return VIANDE; // Menu viande
        case MERCREDI:
            return POISSON; // Menu poisson
        case JEUDI:
            return VEGETARIEN; // Menu vegetarien
        case VENDREDI:
            return PIZZA; // Menu pizza
        case SAMEDI:
        case DIMANCHE:
            return VEGETARIEN; // Weekend vegetarien
        default:
            return VEGETARIEN; // Par d√©faut
    }
}

void afficherMenu(TypeMenu menu) {
    switch (menu) {
        case VIANDE:
            cout << "Menu Viande - 15‚Ç¨" << endl;
            break;
        case POISSON:
            cout << "Menu Poisson - 18‚Ç¨" << endl;
            break;
        case VEGETARIEN:
            cout << "Menu Vegetarien - 12‚Ç¨" << endl;
            break;
        case PIZZA:
            cout << "Menu Pizza - 10‚Ç¨" << endl;
            break;
        default:
            cout << "Menu Inconnu" << endl;
    }
}



int main() {
    cout << "=== üçΩÔ∏è  RESTAURANT 'LES ENUMS GOURMET' ===" << endl;
    
    // üéØ TON CODE ICI - Teste ton syst√®me pour tous les jours
    
    for (int i = LUNDI; i <= DIMANCHE; i++) {
        JourSemaine jour = static_cast<JourSemaine>(i);
        TypeMenu menu = obtenirMenu(jour);
        
        cout << "Jour : " << jour << " - ";
        afficherMenu(menu);
    }
    
    return 0;
}
